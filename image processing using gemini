import streamlit as st
import cv2
import base64
import time
from datetime import datetime
import numpy as np
import google.generativeai as genai
from PIL import Image

# Gemini config
genai.configure(api_key="AIzaSyBQqhaMjm5_60lQoWvpUOYIZQJIEw8RYik")
model = genai.GenerativeModel('gemini-2.0-flash')

# App title
st.set_page_config(layout="wide")
st.title("üå≤ Forest Eye Aerobot - Gemini Live Monitor")
st.markdown("AI-Powered Forest Surveillance with Fire/Smoke Detection üî•")

# Description panel
description_placeholder = st.empty()
alert_log = st.empty()
screenshot_gallery = st.container()

# Webcam feed
FRAME_WINDOW = st.image([])

def get_frame_description(frame):
    _, buffer = cv2.imencode('.jpg', frame)
    image_bytes = buffer.tobytes()
    image_base64 = base64.b64encode(image_bytes).decode()

    response = model.generate_content(
        contents=[
            {
                "role": "user",
                "parts": [
                    {"text": "Describe the forest scene. Is there fire or smoke?"},
                    {
                        "inline_data": {
                            "mime_type": "image/jpeg",
                            "data": image_base64
                        }
                    }
                ]
            }
        ]
    )
    return response.text.strip()

# Start camera
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    st.error("‚ùå Could not access webcam.")
    st.stop()

last_check = time.time()
description = "Initializing..."
logs = []

while True:
    ret, frame = cap.read()
    if not ret:
        st.error("‚ö†Ô∏è Failed to read from camera.")
        break

    # Every 10 seconds, process with Gemini
    if time.time() - last_check >= 10:
        try:
            description = get_frame_description(frame)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            logs.append(f"[{timestamp}] {description}")
            
            # Save frame if fire or smoke detected
            if "fire" in description.lower() or "smoke" in description.lower():
                filename = f"screenshot_{timestamp.replace(' ', '_').replace(':', '-')}.jpg"
                cv2.imwrite(filename, frame)
                with screenshot_gallery:
                    st.image(frame, caption=f"‚ö†Ô∏è {filename}", width=300)

        except Exception as e:
            description = f"[ERROR] {e}"
        last_check = time.time()

    # Show camera feed
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    FRAME_WINDOW.image(frame_rgb)

    # Show description
    description_placeholder.markdown(f"### üß† Gemini says: `{description}`")

    # Show log
    with alert_log:
        st.markdown("#### üïí Event Log:")
        for log in reversed(logs[-10:]):
            st.markdown(f"- {log}")

    # Manual refresh every second
    time.sleep(1)
